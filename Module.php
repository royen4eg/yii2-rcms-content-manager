<?php

namespace rcms\contentManager;

use rcms\contentManager\components\ContentParser;
use rcms\contentManager\models\ContentManagerSettings;
use rcms\contentManager\models\ContentPage;
use rcms\core\AdminModule;
use rcms\core\base\BootstrapConsoleInterface;
use rcms\core\FrontModule;
use Yii;
use yii\base\Application;
use yii\base\BootstrapInterface;
use yii\base\ViewEvent;
use yii\helpers\Url;
use yii\web\View;

/**
 * Class Module
 * @package rcms\contentManager
 *
 * @author Andrii Borodin
 * @since 0.1
 *
 * @property ContentManagerSettings $settings
 */
class Module extends \yii\base\Module implements BootstrapInterface, BootstrapConsoleInterface
{

    const MODULE_NAME = 'Content Manager';

    const BASE_ALIAS = '@rcms/contentManager';

    public $moduleTitle;

    protected $migrationPath = self::BASE_ALIAS . '/migrations';

    /**
     * @var string The [[UrlRule]] class to use for rules generated by this module.
     */
    public $urlRuleClass = 'yii\web\UrlRule';

    public function init()
    {
        Yii::setAlias(self::BASE_ALIAS, __DIR__);

        parent::init();

        if ($this->module instanceof AdminModule) {
            $this->controllerNamespace .= '\admin';
            $this->viewPath .= '\admin';
            $this->layoutPath = '@rcms/core/views/layouts';
            $this->moduleTitle = Yii::t('rcms-contentManager', 'Content Manager');
        } elseif ($this->module instanceof FrontModule) {
            $this->controllerNamespace .= '\front';
            $this->viewPath .= '\front';
        }

        $this->setComponents([
            'settings' => ContentManagerSettings::class
        ]);
    }

    /**
     * Bootstrap method to be called during application bootstrap stage.
     * @param Application $app the application currently running
     */
    public function bootstrap($app)
    {
        if ($this->module instanceof AdminModule) {
            $this->populateSidenav();
        } elseif ($this->module instanceof FrontModule) {
            $this->createNewUrlRules($app);
        }
    }

    /**
     * Bootstrap method to be called during application bootstrap stage.
     * @param \yii\console\Application $app the application currently running
     */
    public function bootstrapConsole($app)
    {
        if ($this->module instanceof \rcms\core\Module) {
            if (is_array($this->module->migrationPath) && !in_array($this->migrationPath, $this->module->migrationPath)) {
                $this->module->migrationPath[] = $this->migrationPath;
            }
        }
    }

    /**
     * Populate sidenavItems to add new items to admin menu
     */
    private function populateSidenav(): void
    {
        AdminModule::$sidenavItems[$this->id] = [
            'label' => $this->moduleTitle,
            'access' => [],
            'active' => false,
            'items' => [
                'pages' => [
                    'label' => Yii::t('rcms-contentManager', 'Static Pages'),
                    'icon' => 'fas fa-newspaper',
                    'access' => [],
                    'url' => Url::to("/{$this->module->id}/{$this->id}/pages")
                ],
                'layouts' => [
                    'label' => Yii::t('rcms-contentManager', 'Layouts'),
                    'icon' => 'fas fa-heading',
                    'access' => [],
                    'url' => Url::to("/{$this->module->id}/{$this->id}/layouts")
                ],
                'file-manager' => [
                    'label' => Yii::t('rcms-contentManager', 'File Manager'),
                    'icon' => 'fas fa-file',
                    'access' => [],
                    'url' => Url::to("/{$this->module->id}/{$this->id}/file-manager")
                ],
                'settings' => [
                    'label' => Yii::t('rcms-contentManager', 'Settings'),
                    'icon' => 'fas fa-cogs',
                    'access' => [],
                    'url' => Url::to("/{$this->module->id}/{$this->id}/settings")
                ],
            ]
        ];
    }

    /**
     * Populate urlManager to add rules for frontend
     * @param Application $app
     */
    private function createNewUrlRules(Application $app)
    {
        $alias = '';

        if (!empty($this->settings->content_root_link)) {
            $alias = $this->settings->content_root_link . '/';
        }

        $rules = [
            "{$this->module->id}/{$this->id}/<action>" => "site/error/not-found",
            'file-manager/get-file' => "{$this->module->id}/{$this->id}/content/get-file",
        ];

        $activeUrls = ContentPage::find()->select('url')
            ->published()
            ->withActiveLang()
            ->guestMode(\Yii::$app->user->isGuest)
            ->byType([ContentPage::TYPE_PAGE, ContentPage::TYPE_PDF])
            ->all();

        foreach ($activeUrls as $urlObj) {
            $rules["{$alias}<pageUrl:({$urlObj->url})>"] = "{$this->module->id}/{$this->id}/content";
        }

        $rules[] = [
            'class' => $this->urlRuleClass,
            'pattern' => "{$alias}<pageUrl:\w{0}>",
            'route' => "{$this->module->id}/{$this->id}/content",
            'defaults' => ['pageUrl' => '/'],
        ];

        $app->getUrlManager()->addRules($rules, false);
    }

    public function transformByEvent(ViewEvent $event)
    {
        /** @var View $view */
        $view = $event->sender;
        $output = $event->output;

        $contentParser = new ContentParser();
        $contentParser->data = $event->params['outParams'] ?? [];
        $contentParser->scanContent($view, $output);
        $event->output = $output;

    }

}
